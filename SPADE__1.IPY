{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "#reading the input file\n",
    "\n",
    "input = open(\"msnbc990928.seq\", \"r\")\n",
    "line_no = 1\n",
    "line = input.readline()\n",
    "while(line_no <8):\n",
    "    line = input.readline()\n",
    "    line_no = line_no+1;"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "# This code reads the sequences in the input file and stores them in a list of tuples\n",
    "seq_no = 1\n",
    "sequences = []\n",
    "while line != \"\" :  \n",
    "    arr = line.split(' ')\n",
    "    if(arr[-1] == '\\n'):\n",
    "        arr = arr[:-1]\n",
    "    index = 1\n",
    "    while(index <= len(arr)):\n",
    "        a = []\n",
    "        a.append(seq_no)\n",
    "        a.append(index)\n",
    "        a.append(arr[index-1])\n",
    "        sequences.append(tuple(a))\n",
    "        index = index+1\n",
    "    \n",
    "    seq_no = seq_no+1\n",
    "    line = input.readline()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[(1, 1, '1'),\n",
       " (1, 2, '1'),\n",
       " (2, 1, '2'),\n",
       " (3, 1, '3'),\n",
       " (3, 2, '2'),\n",
       " (3, 3, '2'),\n",
       " (3, 4, '4'),\n",
       " (3, 5, '2'),\n",
       " (3, 6, '2'),\n",
       " (3, 7, '2'),\n",
       " (3, 8, '3'),\n",
       " (3, 9, '3'),\n",
       " (4, 1, '5'),\n",
       " (5, 1, '1'),\n",
       " (6, 1, '6'),\n",
       " (7, 1, '1'),\n",
       " (7, 2, '1'),\n",
       " (8, 1, '6'),\n",
       " (9, 1, '6'),\n",
       " (9, 2, '7'),\n",
       " (9, 3, '7'),\n",
       " (9, 4, '7'),\n",
       " (9, 5, '6'),\n",
       " (9, 6, '6'),\n",
       " (9, 7, '8'),\n",
       " (9, 8, '8'),\n",
       " (9, 9, '8'),\n",
       " (9, 10, '8'),\n",
       " (10, 1, '6'),\n",
       " (10, 2, '9'),\n",
       " (10, 3, '4'),\n",
       " (10, 4, '4'),\n",
       " (10, 5, '4'),\n",
       " (10, 6, '10'),\n",
       " (10, 7, '3'),\n",
       " (10, 8, '10'),\n",
       " (10, 9, '5'),\n",
       " (10, 10, '10'),\n",
       " (10, 11, '4'),\n",
       " (10, 12, '4'),\n",
       " (10, 13, '4'),\n",
       " (11, 1, '1'),\n",
       " (11, 2, '1'),\n",
       " (11, 3, '1'),\n",
       " (11, 4, '11'),\n",
       " (11, 5, '1'),\n",
       " (11, 6, '1'),\n",
       " (11, 7, '1'),\n",
       " (12, 1, '12'),\n",
       " (12, 2, '12'),\n",
       " (13, 1, '1'),\n",
       " (13, 2, '1'),\n",
       " (14, 1, '8'),\n",
       " (14, 2, '8'),\n",
       " (14, 3, '8'),\n",
       " (14, 4, '8'),\n",
       " (14, 5, '8'),\n",
       " (14, 6, '8'),\n",
       " (15, 1, '6'),\n",
       " (16, 1, '2'),\n",
       " (17, 1, '9'),\n",
       " (17, 2, '12'),\n",
       " (18, 1, '3'),\n",
       " (19, 1, '9'),\n",
       " (20, 1, '3'),\n",
       " (21, 1, '12'),\n",
       " (22, 1, '5'),\n",
       " (23, 1, '13'),\n",
       " (23, 2, '13'),\n",
       " (23, 3, '13'),\n",
       " (24, 1, '6'),\n",
       " (24, 2, '9'),\n",
       " (24, 3, '9'),\n",
       " (24, 4, '9'),\n",
       " (24, 5, '9'),\n",
       " (24, 6, '9'),\n",
       " (24, 7, '9'),\n",
       " (25, 1, '2'),\n",
       " (25, 2, '6'),\n",
       " (26, 1, '12'),\n",
       " (27, 1, '1'),\n",
       " (28, 1, '3'),\n",
       " (29, 1, '6'),\n",
       " (29, 2, '7'),\n",
       " (29, 3, '7'),\n",
       " (29, 4, '7'),\n",
       " (29, 5, '6'),\n",
       " (29, 6, '7'),\n",
       " (30, 1, '6'),\n",
       " (30, 2, '6'),\n",
       " (30, 3, '6'),\n",
       " (31, 1, '14'),\n",
       " (32, 1, '2'),\n",
       " (32, 2, '4'),\n",
       " (32, 3, '4'),\n",
       " (32, 4, '4'),\n",
       " (32, 5, '3'),\n",
       " (33, 1, '6'),\n",
       " (34, 1, '6'),\n",
       " (35, 1, '6'),\n",
       " (36, 1, '8'),\n",
       " (36, 2, '8'),\n",
       " (36, 3, '1'),\n",
       " (36, 4, '7'),\n",
       " (36, 5, '8'),\n",
       " (36, 6, '8'),\n",
       " (36, 7, '8'),\n",
       " (36, 8, '8'),\n",
       " (36, 9, '8'),\n",
       " (36, 10, '8'),\n",
       " (36, 11, '8'),\n",
       " (36, 12, '8'),\n",
       " (36, 13, '8'),\n",
       " (36, 14, '8'),\n",
       " (36, 15, '8'),\n",
       " (37, 1, '6'),\n",
       " (38, 1, '1'),\n",
       " (38, 2, '1'),\n",
       " (39, 1, '13'),\n",
       " (39, 2, '7'),\n",
       " (39, 3, '13'),\n",
       " (39, 4, '7'),\n",
       " (39, 5, '7'),\n",
       " (39, 6, '13'),\n",
       " (39, 7, '7'),\n",
       " (39, 8, '13'),\n",
       " (39, 9, '7'),\n",
       " (39, 10, '13'),\n",
       " (39, 11, '7'),\n",
       " (39, 12, '13'),\n",
       " (39, 13, '14'),\n",
       " (39, 14, '14'),\n",
       " (39, 15, '14'),\n",
       " (39, 16, '13'),\n",
       " (39, 17, '7'),\n",
       " (39, 18, '4'),\n",
       " (39, 19, '4'),\n",
       " (39, 20, '7'),\n",
       " (39, 21, '13'),\n",
       " (39, 22, '13'),\n",
       " (39, 23, '13'),\n",
       " (39, 24, '13'),\n",
       " (40, 1, '8'),\n",
       " (40, 2, '8'),\n",
       " (40, 3, '8'),\n",
       " (41, 1, '1'),\n",
       " (42, 1, '8'),\n",
       " (42, 2, '8'),\n",
       " (43, 1, '13'),\n",
       " (44, 1, '13'),\n",
       " (44, 2, '13'),\n",
       " (45, 1, '13'),\n",
       " (45, 2, '8'),\n",
       " (45, 3, '13'),\n",
       " (45, 4, '13'),\n",
       " (45, 5, '13'),\n",
       " (45, 6, '14'),\n",
       " (45, 7, '14'),\n",
       " (45, 8, '14'),\n",
       " (45, 9, '14'),\n",
       " (45, 10, '14'),\n",
       " (46, 1, '6'),\n",
       " (46, 2, '6'),\n",
       " (46, 3, '6'),\n",
       " (46, 4, '6'),\n",
       " (47, 1, '5'),\n",
       " (48, 1, '6'),\n",
       " (49, 1, '13'),\n",
       " (49, 2, '13'),\n",
       " (50, 1, '12'),\n",
       " (51, 1, '8'),\n",
       " (51, 2, '8'),\n",
       " (52, 1, '13'),\n",
       " (52, 2, '13'),\n",
       " (52, 3, '13'),\n",
       " (53, 1, '1'),\n",
       " (53, 2, '1'),\n",
       " (53, 3, '8'),\n",
       " (54, 1, '13'),\n",
       " (54, 2, '14'),\n",
       " (55, 1, '13'),\n",
       " (55, 2, '13'),\n",
       " (55, 3, '13'),\n",
       " (55, 4, '13'),\n",
       " (55, 5, '13'),\n",
       " (55, 6, '13'),\n",
       " (55, 7, '13'),\n",
       " (55, 8, '9'),\n",
       " (56, 1, '12'),\n",
       " (57, 1, '1'),\n",
       " (57, 2, '3'),\n",
       " (57, 3, '3'),\n",
       " (57, 4, '1'),\n",
       " (58, 1, '8'),\n",
       " (58, 2, '8'),\n",
       " (58, 3, '8'),\n",
       " (58, 4, '7'),\n",
       " (58, 5, '4'),\n",
       " (58, 6, '8'),\n",
       " (58, 7, '8'),\n",
       " (58, 8, '8'),\n",
       " (59, 1, '1'),\n",
       " (59, 2, '1'),\n",
       " (59, 3, '11'),\n",
       " (59, 4, '1'),\n",
       " (59, 5, '12'),\n",
       " (59, 6, '1'),\n",
       " (59, 7, '1'),\n",
       " (59, 8, '1'),\n",
       " (59, 9, '1'),\n",
       " (59, 10, '1'),\n",
       " (60, 1, '6'),\n",
       " (60, 2, '9'),\n",
       " (60, 3, '9'),\n",
       " (60, 4, '9'),\n",
       " (60, 5, '9'),\n",
       " (60, 6, '7'),\n",
       " (60, 7, '9'),\n",
       " (61, 1, '2'),\n",
       " (62, 1, '13'),\n",
       " (62, 2, '14'),\n",
       " (62, 3, '13'),\n",
       " (63, 1, '1'),\n",
       " (63, 2, '1'),\n",
       " (63, 3, '1'),\n",
       " (64, 1, '2'),\n",
       " (64, 2, '12'),\n",
       " (64, 3, '3'),\n",
       " (64, 4, '4'),\n",
       " (64, 5, '12'),\n",
       " (64, 6, '12'),\n",
       " (65, 1, '1'),\n",
       " (66, 1, '4'),\n",
       " (67, 1, '1'),\n",
       " (67, 2, '3'),\n",
       " (67, 3, '3'),\n",
       " (68, 1, '1'),\n",
       " (68, 2, '1'),\n",
       " (68, 3, '12'),\n",
       " (68, 4, '1'),\n",
       " (69, 1, '14'),\n",
       " (69, 2, '14'),\n",
       " (69, 3, '14'),\n",
       " (69, 4, '14'),\n",
       " (69, 5, '14'),\n",
       " (69, 6, '14'),\n",
       " (70, 1, '1'),\n",
       " (70, 2, '1'),\n",
       " (71, 1, '2'),\n",
       " (72, 1, '11'),\n",
       " (72, 2, '11'),\n",
       " (72, 3, '14'),\n",
       " (73, 1, '6'),\n",
       " (73, 2, '8'),\n",
       " (74, 1, '9'),\n",
       " (74, 2, '12'),\n",
       " (74, 3, '9'),\n",
       " (74, 4, '9'),\n",
       " (74, 5, '9'),\n",
       " (74, 6, '9'),\n",
       " (74, 7, '7'),\n",
       " (74, 8, '4'),\n",
       " (74, 9, '4'),\n",
       " (74, 10, '4'),\n",
       " (74, 11, '4'),\n",
       " (74, 12, '4'),\n",
       " (74, 13, '4'),\n",
       " (74, 14, '4'),\n",
       " (75, 1, '1'),\n",
       " (75, 2, '2'),\n",
       " (75, 3, '1'),\n",
       " (75, 4, '14'),\n",
       " (75, 5, '14'),\n",
       " (75, 6, '14'),\n",
       " (75, 7, '14'),\n",
       " (75, 8, '14'),\n",
       " (75, 9, '14'),\n",
       " (75, 10, '14'),\n",
       " (75, 11, '14'),\n",
       " (75, 12, '14'),\n",
       " (75, 13, '14'),\n",
       " (75, 14, '14'),\n",
       " (75, 15, '14'),\n",
       " (75, 16, '1'),\n",
       " (75, 17, '2'),\n",
       " (75, 18, '2'),\n",
       " (76, 1, '1'),\n",
       " (76, 2, '6'),\n",
       " (76, 3, '6'),\n",
       " (77, 1, '6'),\n",
       " (78, 1, '1'),\n",
       " (78, 2, '4'),\n",
       " (78, 3, '7'),\n",
       " (78, 4, '1'),\n",
       " (78, 5, '10'),\n",
       " (78, 6, '10'),\n",
       " (78, 7, '1'),\n",
       " (78, 8, '2'),\n",
       " (78, 9, '2'),\n",
       " (78, 10, '1'),\n",
       " (78, 11, '1'),\n",
       " (78, 12, '6'),\n",
       " (78, 13, '1'),\n",
       " (79, 1, '8'),\n",
       " (79, 2, '8'),\n",
       " (79, 3, '8'),\n",
       " (79, 4, '8'),\n",
       " (80, 1, '1'),\n",
       " (81, 1, '1'),\n",
       " (81, 2, '1'),\n",
       " (81, 3, '12'),\n",
       " (81, 4, '2'),\n",
       " (81, 5, '2'),\n",
       " (81, 6, '4'),\n",
       " (82, 1, '1'),\n",
       " (82, 2, '1'),\n",
       " (82, 3, '1'),\n",
       " (82, 4, '1'),\n",
       " (82, 5, '1'),\n",
       " (82, 6, '1'),\n",
       " (82, 7, '1'),\n",
       " (82, 8, '1'),\n",
       " (83, 1, '1'),\n",
       " (84, 1, '8'),\n",
       " (84, 2, '8'),\n",
       " (84, 3, '8'),\n",
       " (84, 4, '8'),\n",
       " (84, 5, '8'),\n",
       " (84, 6, '8'),\n",
       " (84, 7, '8'),\n",
       " (85, 1, '1'),\n",
       " (85, 2, '1'),\n",
       " (85, 3, '4'),\n",
       " (85, 4, '10'),\n",
       " (85, 5, '10'),\n",
       " (85, 6, '10'),\n",
       " (85, 7, '10'),\n",
       " (85, 8, '10'),\n",
       " (85, 9, '15'),\n",
       " (85, 10, '10'),\n",
       " (86, 1, '6'),\n",
       " (86, 2, '15'),\n",
       " (86, 3, '6'),\n",
       " (87, 1, '6'),\n",
       " (88, 1, '6'),\n",
       " (89, 1, '8'),\n",
       " (89, 2, '8'),\n",
       " (89, 3, '8'),\n",
       " (89, 4, '8'),\n",
       " (90, 1, '6'),\n",
       " (91, 1, '6'),\n",
       " (92, 1, '3'),\n",
       " (92, 2, '3'),\n",
       " (93, 1, '8'),\n",
       " (93, 2, '8'),\n",
       " (94, 1, '3'),\n",
       " (94, 2, '3'),\n",
       " (94, 3, '3'),\n",
       " (94, 4, '4'),\n",
       " (95, 1, '4'),\n",
       " (96, 1, '12'),\n",
       " (97, 1, '13'),\n",
       " (97, 2, '13'),\n",
       " (97, 3, '14'),\n",
       " (98, 1, '13'),\n",
       " (98, 2, '13'),\n",
       " (98, 3, '13'),\n",
       " (98, 4, '13'),\n",
       " (99, 1, '8'),\n",
       " (99, 2, '8'),\n",
       " (99, 3, '8'),\n",
       " (99, 4, '8'),\n",
       " (99, 5, '8'),\n",
       " (99, 6, '8'),\n",
       " (99, 7, '8'),\n",
       " (99, 8, '8'),\n",
       " (99, 9, '8'),\n",
       " (100, 1, '4'),\n",
       " (100, 2, '4'),\n",
       " (100, 3, '6'),\n",
       " (101, 1, '3'),\n",
       " (102, 1, '13'),\n",
       " (103, 1, '9'),\n",
       " (103, 2, '7'),\n",
       " (103, 3, '9'),\n",
       " (103, 4, '7'),\n",
       " (103, 5, '7'),\n",
       " (103, 6, '9'),\n",
       " (103, 7, '12'),\n",
       " (103, 8, '6'),\n",
       " (103, 9, '10'),\n",
       " (103, 10, '13'),\n",
       " (103, 11, '14'),\n",
       " (103, 12, '12'),\n",
       " (103, 13, '3'),\n",
       " (104, 1, '1'),\n",
       " (104, 2, '5'),\n",
       " (104, 3, '5'),\n",
       " (104, 4, '5'),\n",
       " (105, 1, '14'),\n",
       " (105, 2, '14'),\n",
       " (105, 3, '14'),\n",
       " (105, 4, '14'),\n",
       " (106, 1, '14'),\n",
       " (106, 2, '14'),\n",
       " (106, 3, '14'),\n",
       " (107, 1, '4'),\n",
       " (107, 2, '4'),\n",
       " (107, 3, '10'),\n",
       " (107, 4, '10'),\n",
       " (107, 5, '10'),\n",
       " (107, 6, '10'),\n",
       " (107, 7, '2'),\n",
       " (107, 8, '2'),\n",
       " (107, 9, '2'),\n",
       " (107, 10, '2'),\n",
       " (107, 11, '10'),\n",
       " (107, 12, '12'),\n",
       " (107, 13, '12'),\n",
       " (107, 14, '10'),\n",
       " (107, 15, '7'),\n",
       " (107, 16, '7'),\n",
       " (107, 17, '1'),\n",
       " (107, 18, '10'),\n",
       " (108, 1, '1'),\n",
       " (108, 2, '1'),\n",
       " (109, 1, '1'),\n",
       " (109, 2, '1'),\n",
       " (110, 1, '4'),\n",
       " (110, 2, '4'),\n",
       " (110, 3, '9'),\n",
       " (110, 4, '9'),\n",
       " (110, 5, '3'),\n",
       " (111, 1, '12'),\n",
       " (111, 2, '12'),\n",
       " (111, 3, '12'),\n",
       " (112, 1, '9'),\n",
       " (112, 2, '9'),\n",
       " (112, 3, '4'),\n",
       " (112, 4, '4'),\n",
       " (113, 1, '6'),\n",
       " (114, 1, '9'),\n",
       " (114, 2, '9'),\n",
       " (114, 3, '9'),\n",
       " (114, 4, '9'),\n",
       " (114, 5, '9'),\n",
       " (114, 6, '6'),\n",
       " (114, 7, '9'),\n",
       " (114, 8, '6'),\n",
       " (115, 1, '8'),\n",
       " (115, 2, '8'),\n",
       " (115, 3, '8'),\n",
       " (115, 4, '8'),\n",
       " (115, 5, '8'),\n",
       " (115, 6, '13'),\n",
       " (115, 7, '13'),\n",
       " (115, 8, '13'),\n",
       " (115, 9, '13'),\n",
       " (115, 10, '8'),\n",
       " (115, 11, '8'),\n",
       " (115, 12, '8'),\n",
       " (115, 13, '8'),\n",
       " (115, 14, '8'),\n",
       " (115, 15, '8'),\n",
       " (115, 16, '8'),\n",
       " (115, 17, '8'),\n",
       " (115, 18, '8'),\n",
       " (115, 19, '8'),\n",
       " (115, 20, '8'),\n",
       " (115, 21, '8'),\n",
       " (116, 1, '6'),\n",
       " (117, 1, '1'),\n",
       " (117, 2, '1'),\n",
       " (117, 3, '1'),\n",
       " (117, 4, '12'),\n",
       " (117, 5, '1'),\n",
       " (117, 6, '10'),\n",
       " (117, 7, '10'),\n",
       " (117, 8, '14'),\n",
       " (117, 9, '2'),\n",
       " (117, 10, '14'),\n",
       " (117, 11, '14'),\n",
       " (117, 12, '14'),\n",
       " (117, 13, '14'),\n",
       " (117, 14, '14'),\n",
       " (118, 1, '6'),\n",
       " (118, 2, '6'),\n",
       " (119, 1, '6'),\n",
       " (120, 1, '3'),\n",
       " (121, 1, '13'),\n",
       " (121, 2, '13'),\n",
       " (121, 3, '13'),\n",
       " (121, 4, '13'),\n",
       " (121, 5, '13'),\n",
       " (121, 6, '13'),\n",
       " (121, 7, '13'),\n",
       " (122, 1, '1'),\n",
       " (123, 1, '12'),\n",
       " (124, 1, '3'),\n",
       " (125, 1, '8'),\n",
       " (125, 2, '4'),\n",
       " (125, 3, '4'),\n",
       " (126, 1, '3'),\n",
       " (126, 2, '3'),\n",
       " (127, 1, '11'),\n",
       " (128, 1, '14'),\n",
       " (129, 1, '13'),\n",
       " (129, 2, '9'),\n",
       " (130, 1, '9'),\n",
       " (130, 2, '12'),\n",
       " (130, 3, '12'),\n",
       " (131, 1, '8'),\n",
       " (132, 1, '6'),\n",
       " (132, 2, '15'),\n",
       " (132, 3, '6'),\n",
       " (133, 1, '14'),\n",
       " (134, 1, '9'),\n",
       " (134, 2, '9'),\n",
       " (134, 3, '9'),\n",
       " (134, 4, '9'),\n",
       " (134, 5, '9'),\n",
       " (135, 1, '8'),\n",
       " (136, 1, '13'),\n",
       " (136, 2, '13'),\n",
       " (136, 3, '13'),\n",
       " (136, 4, '14'),\n",
       " (136, 5, '14'),\n",
       " (136, 6, '14'),\n",
       " (136, 7, '14'),\n",
       " (136, 8, '14'),\n",
       " (136, 9, '14'),\n",
       " (136, 10, '14'),\n",
       " (136, 11, '14'),\n",
       " (136, 12, '14'),\n",
       " (136, 13, '14'),\n",
       " (136, 14, '14'),\n",
       " (136, 15, '14'),\n",
       " (136, 16, '14'),\n",
       " (136, 17, '14'),\n",
       " (136, 18, '14'),\n",
       " (136, 19, '14'),\n",
       " (137, 1, '6'),\n",
       " (137, 2, '9'),\n",
       " (137, 3, '9'),\n",
       " (137, 4, '2'),\n",
       " (138, 1, '9'),\n",
       " (138, 2, '9'),\n",
       " (138, 3, '3'),\n",
       " (138, 4, '11'),\n",
       " (139, 1, '5'),\n",
       " (139, 2, '5'),\n",
       " (139, 3, '5'),\n",
       " (139, 4, '5'),\n",
       " (139, 5, '5'),\n",
       " (139, 6, '5'),\n",
       " (139, 7, '5'),\n",
       " (139, 8, '5'),\n",
       " (139, 9, '5'),\n",
       " (139, 10, '5'),\n",
       " (139, 11, '5'),\n",
       " (139, 12, '5'),\n",
       " (139, 13, '5'),\n",
       " (139, 14, '5'),\n",
       " (139, 15, '5'),\n",
       " (139, 16, '5'),\n",
       " (139, 17, '5'),\n",
       " (139, 18, '5'),\n",
       " (139, 19, '5'),\n",
       " (139, 20, '5'),\n",
       " (139, 21, '5'),\n",
       " (139, 22, '5'),\n",
       " (139, 23, '5'),\n",
       " (139, 24, '5'),\n",
       " (139, 25, '5'),\n",
       " (139, 26, '5'),\n",
       " (139, 27, '5'),\n",
       " (139, 28, '5'),\n",
       " (139, 29, '5'),\n",
       " (139, 30, '5'),\n",
       " (140, 1, '4'),\n",
       " (141, 1, '1'),\n",
       " (141, 2, '1'),\n",
       " (141, 3, '2'),\n",
       " (142, 1, '1'),\n",
       " (142, 2, '1'),\n",
       " (142, 3, '1'),\n",
       " (143, 1, '13'),\n",
       " (144, 1, '12'),\n",
       " (144, 2, '12'),\n",
       " (145, 1, '1'),\n",
       " (145, 2, '3'),\n",
       " (145, 3, '3'),\n",
       " (145, 4, '3'),\n",
       " (145, 5, '3'),\n",
       " (146, 1, '13'),\n",
       " (147, 1, '12'),\n",
       " (147, 2, '12'),\n",
       " (147, 3, '1'),\n",
       " (148, 1, '11'),\n",
       " (148, 2, '1'),\n",
       " (148, 3, '1'),\n",
       " (148, 4, '1'),\n",
       " (148, 5, '2'),\n",
       " (148, 6, '1'),\n",
       " (148, 7, '1'),\n",
       " (148, 8, '5'),\n",
       " (148, 9, '5'),\n",
       " (148, 10, '5'),\n",
       " (148, 11, '5'),\n",
       " (148, 12, '5'),\n",
       " (148, 13, '5'),\n",
       " (148, 14, '1'),\n",
       " (148, 15, '1'),\n",
       " (148, 16, '6'),\n",
       " (148, 17, '6'),\n",
       " (148, 18, '1'),\n",
       " (148, 19, '1'),\n",
       " (148, 20, '6'),\n",
       " (148, 21, '1'),\n",
       " (148, 22, '1'),\n",
       " (148, 23, '1'),\n",
       " (148, 24, '1'),\n",
       " (148, 25, '5'),\n",
       " (149, 1, '8'),\n",
       " (149, 2, '8'),\n",
       " (149, 3, '8'),\n",
       " (149, 4, '8'),\n",
       " (149, 5, '8'),\n",
       " (149, 6, '8'),\n",
       " (149, 7, '8'),\n",
       " (149, 8, '8'),\n",
       " (149, 9, '8'),\n",
       " (150, 1, '5'),\n",
       " (151, 1, '9'),\n",
       " (151, 2, '9'),\n",
       " (151, 3, '9'),\n",
       " (151, 4, '9'),\n",
       " (151, 5, '9'),\n",
       " (151, 6, '5'),\n",
       " (151, 7, '5'),\n",
       " (151, 8, '5'),\n",
       " (151, 9, '5'),\n",
       " (151, 10, '5'),\n",
       " (151, 11, '5'),\n",
       " (151, 12, '5'),\n",
       " (151, 13, '5'),\n",
       " (151, 14, '5'),\n",
       " (151, 15, '5'),\n",
       " (151, 16, '5'),\n",
       " (151, 17, '5'),\n",
       " (151, 18, '5'),\n",
       " (151, 19, '5'),\n",
       " (151, 20, '5'),\n",
       " (151, 21, '5'),\n",
       " (151, 22, '5'),\n",
       " (151, 23, '5'),\n",
       " (151, 24, '5'),\n",
       " (151, 25, '5'),\n",
       " (151, 26, '5'),\n",
       " (151, 27, '5'),\n",
       " (151, 28, '5'),\n",
       " (151, 29, '5'),\n",
       " (151, 30, '9'),\n",
       " (152, 1, '10'),\n",
       " (153, 1, '12'),\n",
       " (153, 2, '9'),\n",
       " (153, 3, '3'),\n",
       " (153, 4, '12'),\n",
       " (153, 5, '4'),\n",
       " (153, 6, '9'),\n",
       " (153, 7, '12'),\n",
       " (154, 1, '1'),\n",
       " (154, 2, '2'),\n",
       " (154, 3, '2'),\n",
       " (154, 4, '2'),\n",
       " (154, 5, '2'),\n",
       " (154, 6, '2'),\n",
       " (154, 7, '6'),\n",
       " (154, 8, '6'),\n",
       " (154, 9, '7'),\n",
       " (154, 10, '7'),\n",
       " (154, 11, '7'),\n",
       " (154, 12, '7'),\n",
       " (155, 1, '9'),\n",
       " (156, 1, '14'),\n",
       " (156, 2, '3'),\n",
       " (156, 3, '4'),\n",
       " (157, 1, '6'),\n",
       " (158, 1, '6'),\n",
       " (158, 2, '2'),\n",
       " (158, 3, '2'),\n",
       " (158, 4, '2'),\n",
       " (158, 5, '15'),\n",
       " (158, 6, '2'),\n",
       " (158, 7, '2'),\n",
       " (158, 8, '1'),\n",
       " (158, 9, '2'),\n",
       " (158, 10, '8'),\n",
       " (158, 11, '5'),\n",
       " (158, 12, '6'),\n",
       " (158, 13, '7'),\n",
       " (158, 14, '3'),\n",
       " (158, 15, '10'),\n",
       " (158, 16, '11'),\n",
       " (158, 17, '14'),\n",
       " (158, 18, '12'),\n",
       " (158, 19, '2'),\n",
       " (158, 20, '2'),\n",
       " (158, 21, '15'),\n",
       " (158, 22, '15'),\n",
       " (158, 23, '1'),\n",
       " (158, 24, '7'),\n",
       " (158, 25, '6'),\n",
       " (158, 26, '7'),\n",
       " (158, 27, '6'),\n",
       " (158, 28, '7'),\n",
       " (158, 29, '4'),\n",
       " (158, 30, '7'),\n",
       " (158, 31, '7'),\n",
       " (158, 32, '7'),\n",
       " (158, 33, '7'),\n",
       " (158, 34, '7'),\n",
       " (158, 35, '7'),\n",
       " (158, 36, '7'),\n",
       " (158, 37, '6'),\n",
       " (158, 38, '7'),\n",
       " (158, 39, '7'),\n",
       " (158, 40, '7'),\n",
       " (158, 41, '7'),\n",
       " (158, 42, '7'),\n",
       " (158, 43, '7'),\n",
       " (158, 44, '7'),\n",
       " (158, 45, '7'),\n",
       " (158, 46, '7'),\n",
       " (158, 47, '7'),\n",
       " (158, 48, '7'),\n",
       " (158, 49, '7'),\n",
       " (158, 50, '7'),\n",
       " (158, 51, '7'),\n",
       " (158, 52, '7'),\n",
       " (158, 53, '7'),\n",
       " (158, 54, '7'),\n",
       " (158, 55, '7'),\n",
       " (158, 56, '7'),\n",
       " (158, 57, '7'),\n",
       " (158, 58, '7'),\n",
       " (158, 59, '7'),\n",
       " (158, 60, '7'),\n",
       " (158, 61, '7'),\n",
       " (158, 62, '7'),\n",
       " (158, 63, '7'),\n",
       " (158, 64, '7'),\n",
       " (158, 65, '7'),\n",
       " (158, 66, '7'),\n",
       " (158, 67, '7'),\n",
       " (158, 68, '7'),\n",
       " (158, 69, '7'),\n",
       " (158, 70, '7'),\n",
       " (158, 71, '7'),\n",
       " (158, 72, '7'),\n",
       " (158, 73, '7'),\n",
       " (158, 74, '7'),\n",
       " (158, 75, '7'),\n",
       " (158, 76, '7'),\n",
       " (158, 77, '7'),\n",
       " (158, 78, '7'),\n",
       " (158, 79, '7'),\n",
       " (158, 80, '7'),\n",
       " (158, 81, '7'),\n",
       " (158, 82, '7'),\n",
       " (158, 83, '7'),\n",
       " (158, 84, '6'),\n",
       " (158, 85, '7'),\n",
       " (158, 86, '7'),\n",
       " (158, 87, '7'),\n",
       " (158, 88, '7'),\n",
       " (158, 89, '7'),\n",
       " (158, 90, '7'),\n",
       " (158, 91, '7'),\n",
       " (158, 92, '7'),\n",
       " (158, 93, '7'),\n",
       " (158, 94, '7'),\n",
       " (158, 95, '7'),\n",
       " (158, 96, '7'),\n",
       " (158, 97, '7'),\n",
       " (158, 98, '7'),\n",
       " (158, 99, '7'),\n",
       " (158, 100, '7'),\n",
       " (158, 101, '7'),\n",
       " (158, 102, '7'),\n",
       " (158, 103, '7'),\n",
       " (158, 104, '7'),\n",
       " (158, 105, '7'),\n",
       " (158, 106, '7'),\n",
       " (158, 107, '7'),\n",
       " (158, 108, '7'),\n",
       " (158, 109, '7'),\n",
       " (158, 110, '7'),\n",
       " (158, 111, '7'),\n",
       " (158, 112, '7'),\n",
       " (158, 113, '7'),\n",
       " (158, 114, '7'),\n",
       " (158, 115, '7'),\n",
       " (158, 116, '7'),\n",
       " (158, 117, '7'),\n",
       " (158, 118, '7'),\n",
       " (158, 119, '7'),\n",
       " (158, 120, '7'),\n",
       " (158, 121, '7'),\n",
       " (158, 122, '7'),\n",
       " (158, 123, '7'),\n",
       " (158, 124, '7'),\n",
       " (158, 125, '7'),\n",
       " (158, 126, '7'),\n",
       " (158, 127, '7'),\n",
       " (158, 128, '7'),\n",
       " (158, 129, '7'),\n",
       " (158, 130, '7'),\n",
       " (158, 131, '7'),\n",
       " (158, 132, '7'),\n",
       " (158, 133, '7'),\n",
       " (158, 134, '7'),\n",
       " (158, 135, '7'),\n",
       " (158, 136, '7'),\n",
       " (158, 137, '7'),\n",
       " (158, 138, '7'),\n",
       " (158, 139, '7'),\n",
       " (158, 140, '7'),\n",
       " (158, 141, '7'),\n",
       " (158, 142, '7'),\n",
       " (158, 143, '7'),\n",
       " (158, 144, '7'),\n",
       " (158, 145, '7'),\n",
       " (158, 146, '7'),\n",
       " (158, 147, '7'),\n",
       " (158, 148, '7'),\n",
       " (158, 149, '7'),\n",
       " (158, 150, '7'),\n",
       " (158, 151, '7'),\n",
       " (158, 152, '7'),\n",
       " (158, 153, '7'),\n",
       " (158, 154, '7'),\n",
       " (158, 155, '7'),\n",
       " (158, 156, '7'),\n",
       " (158, 157, '7'),\n",
       " (158, 158, '7'),\n",
       " (158, 159, '7'),\n",
       " (158, 160, '7'),\n",
       " (158, 161, '7'),\n",
       " (158, 162, '7'),\n",
       " (158, 163, '7'),\n",
       " (158, 164, '7'),\n",
       " (158, 165, '7'),\n",
       " (158, 166, '7'),\n",
       " (158, 167, '7'),\n",
       " (158, 168, '7'),\n",
       " (158, 169, '8'),\n",
       " (158, 170, '7'),\n",
       " (158, 171, '5'),\n",
       " (158, 172, '6'),\n",
       " (158, 173, '7'),\n",
       " (158, 174, '7'),\n",
       " (158, 175, '7'),\n",
       " (158, 176, '7'),\n",
       " (158, 177, '7'),\n",
       " (158, 178, '11'),\n",
       " (158, 179, '10'),\n",
       " (158, 180, '7'),\n",
       " (158, 181, '14'),\n",
       " (158, 182, '2'),\n",
       " (158, 183, '12'),\n",
       " (158, 184, '3'),\n",
       " (158, 185, '1'),\n",
       " (158, 186, '7'),\n",
       " (158, 187, '7'),\n",
       " (158, 188, '7'),\n",
       " (158, 189, '6'),\n",
       " (158, 190, '4'),\n",
       " (158, 191, '14'),\n",
       " (158, 192, '2'),\n",
       " (158, 193, '2'),\n",
       " (158, 194, '2'),\n",
       " (158, 195, '2'),\n",
       " (158, 196, '2'),\n",
       " (158, 197, '2'),\n",
       " (158, 198, '14'),\n",
       " (158, 199, '14'),\n",
       " (158, 200, '2'),\n",
       " (158, 201, '14'),\n",
       " (158, 202, '2'),\n",
       " (158, 203, '14'),\n",
       " (158, 204, '16'),\n",
       " (158, 205, '14'),\n",
       " (158, 206, '14'),\n",
       " (158, 207, '14'),\n",
       " (158, 208, '14'),\n",
       " (158, 209, '14'),\n",
       " (158, 210, '14'),\n",
       " (158, 211, '14'),\n",
       " (158, 212, '14'),\n",
       " (158, 213, '14'),\n",
       " (158, 214, '14'),\n",
       " (158, 215, '14'),\n",
       " (158, 216, '14'),\n",
       " (158, 217, '14'),\n",
       " (158, 218, '14'),\n",
       " (158, 219, '14'),\n",
       " (158, 220, '14'),\n",
       " (158, 221, '14'),\n",
       " (158, 222, '14'),\n",
       " (158, 223, '14'),\n",
       " (158, 224, '14'),\n",
       " (158, 225, '14'),\n",
       " (158, 226, '14'),\n",
       " (158, 227, '14'),\n",
       " (158, 228, '14'),\n",
       " (158, 229, '14'),\n",
       " (158, 230, '14'),\n",
       " (158, 231, '14'),\n",
       " (158, 232, '14'),\n",
       " (158, 233, '14'),\n",
       " (158, 234, '14'),\n",
       " (158, 235, '14'),\n",
       " (158, 236, '14'),\n",
       " (158, 237, '14'),\n",
       " (158, 238, '14'),\n",
       " (158, 239, '14'),\n",
       " (158, 240, '16'),\n",
       " (158, 241, '14'),\n",
       " (158, 242, '14'),\n",
       " (158, 243, '14'),\n",
       " (158, 244, '14'),\n",
       " (158, 245, '14'),\n",
       " (158, 246, '14'),\n",
       " (158, 247, '14'),\n",
       " (158, 248, '14'),\n",
       " (158, 249, '14'),\n",
       " (158, 250, '14'),\n",
       " (159, 1, '9'),\n",
       " (159, 2, '3'),\n",
       " (159, 3, '3'),\n",
       " (160, 1, '11'),\n",
       " (161, 1, '1'),\n",
       " (161, 2, '1'),\n",
       " (161, 3, '1'),\n",
       " (161, 4, '1'),\n",
       " (161, 5, '1'),\n",
       " (161, 6, '1'),\n",
       " (161, 7, '2'),\n",
       " (161, 8, '1'),\n",
       " (162, 1, '6'),\n",
       " (162, 2, '8'),\n",
       " (162, 3, '8'),\n",
       " (162, 4, '8'),\n",
       " (162, 5, '8'),\n",
       " (162, 6, '12'),\n",
       " (163, 1, '1'),\n",
       " (163, 2, '14'),\n",
       " (163, 3, '1'),\n",
       " (163, 4, '14'),\n",
       " (163, 5, '1'),\n",
       " (163, 6, '1'),\n",
       " (163, 7, '1'),\n",
       " (163, 8, '1'),\n",
       " (163, 9, '1'),\n",
       " (164, 1, '6'),\n",
       " (165, 1, '9'),\n",
       " (165, 2, '7'),\n",
       " (165, 3, '7'),\n",
       " (165, 4, '9'),\n",
       " (165, 5, '4'),\n",
       " (165, 6, '4'),\n",
       " (165, 7, '4'),\n",
       " (165, 8, '4'),\n",
       " (165, 9, '4'),\n",
       " (165, 10, '7'),\n",
       " (165, 11, '4'),\n",
       " (165, 12, '6'),\n",
       " (166, 1, '1'),\n",
       " (166, 2, '14'),\n",
       " (166, 3, '14'),\n",
       " (166, 4, '14'),\n",
       " (166, 5, '14'),\n",
       " (166, 6, '14'),\n",
       " (166, 7, '14'),\n",
       " (166, 8, '14'),\n",
       " (166, 9, '1'),\n",
       " (166, 10, '14'),\n",
       " (166, 11, '14'),\n",
       " (166, 12, '14'),\n",
       " (166, 13, '14'),\n",
       " (166, 14, '14'),\n",
       " (166, 15, '14'),\n",
       " (166, 16, '14'),\n",
       " (166, 17, '14'),\n",
       " (166, 18, '1'),\n",
       " (166, 19, '14'),\n",
       " (166, 20, '14'),\n",
       " (167, 1, '1'),\n",
       " (167, 2, '1'),\n",
       " ...]"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# This is the list of tuples in the order: sequenceID,EventID ,sequence\n",
    "sequences"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "#defining a default dictionary from the collections module to avoid KeyErrors\n",
    "\n",
    "import collections\n",
    "\n",
    "class _KeyDefaultDict(collections.defaultdict):\n",
    "    def __missing__(self,key):\n",
    "        if self.default_factory is None:\n",
    "            raise KeyError(key)\n",
    "        else:\n",
    "            ret = self[key] = self.default_factory(key)\n",
    "            return ret"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "Event = collections.namedtuple('Event','sid eid')\n",
    "\n",
    "class Element(object):\n",
    "    '''An element of the set of all possible subsequences, and a description of\n",
    "    where that element occurs in the input sequences.\n",
    "    '''\n",
    "    def __init__(self,seq,*events):\n",
    "\n",
    "        self.seq = seq\n",
    "        self.events = set()\n",
    "\n",
    "        for event in events:\n",
    "            self.events.add(event)\n",
    "\n",
    "    def __ior__(self,other_element):\n",
    "        '''Implements the assignment operator |= by returning an Element whose\n",
    "        events attribute is a union of the events of both input Elements.\n",
    "        '''\n",
    "        self.events |= other_element.events\n",
    "        return self\n",
    "\n",
    "    def __repr__(self):\n",
    "\n",
    "        return self.__dict__.__repr__()\n",
    "\n",
    "    def __eq__(self,other):\n",
    "\n",
    "        return (self.seq == other.seq and self.events == other.events)\n",
    "\n",
    "      "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "'''This function returns a Defaultdictionary with all the SequenceIds as keys and single element sequences as values \n",
    "which meet the given support threshold'''\n",
    "\n",
    "\n",
    "def subset(elements,support_threshold):\n",
    "    subset_dict = _KeyDefaultDict(Element)\n",
    "    for element_name,element in elements.items():\n",
    "        support = len(set([event.sid for event in element.events]))\n",
    "        if support >= support_threshold:\n",
    "            subset_dict[element_name] = element                    \n",
    "    return subset_dict"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "#This function returns a dictionary of two sequences as keys with frequency of each two-sequence as value\n",
    "\n",
    "\n",
    "def frequent_two_seq(elements,support_threshold):\n",
    "\n",
    "    '''First converting the  dictionary of elements into horizontal form to be able to count the \n",
    "    frequency of two-item sequences'''\n",
    "    \n",
    "    horizontal_db = {} \n",
    "    for element_name,element in elements.items():                \n",
    "        for event in element.events:\n",
    "            if event.sid not in horizontal_db:\n",
    "                 horizontal_db[event.sid] = []\n",
    "            horizontal_db[event.sid].append((element_name,event.eid))\n",
    "\n",
    "    # create counts using horizontal_db\n",
    "    count = collections.defaultdict(int)\n",
    "    \n",
    "    for sid,seq in horizontal_db.items():      \n",
    "        for event_index_i,event_i in enumerate(seq):\n",
    "            for event_index_j,event_j in enumerate(seq[event_index_i+1:]):                      \n",
    "                if event_i[1] <= event_j[1]:\n",
    "                    two_seq = event_i[0]+event_j[0]\n",
    "                else:\n",
    "                    two_seq = event_j[0]+event_i[0]\n",
    "\n",
    "                counts[two_seq] += 1\n",
    "\n",
    "    return {tuple(sorted(two_seq)) for two_seq,c in count.items() if c  >= support_threshold}\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "#This function is to join two elements if they have the same sequenceId and EventIDs occur one after the other\n",
    "\n",
    "def temporal_join(element_i,element_j):\n",
    "    '''Given two elements, return a dictionary of new elements indexed by\n",
    "    their corresponding item sequences.\n",
    "    '''\n",
    "\n",
    "    join_results = _KeyDefaultDict(Element)\n",
    "    \n",
    "    for event_index_i,event_i in enumerate(element_i.events):\n",
    "        for event_index_j,event_j in enumerate(element_j.events):\n",
    "    \n",
    "            if event_i.sid == event_j.sid:\n",
    "                                        \n",
    "                sid = event_i.sid\n",
    "                superseqs = tuple()\n",
    "                superseqs_events = tuple()\n",
    "            \n",
    "                # these two atoms occur in the same sequence\n",
    "                # if they occur at different times (different eids), then\n",
    "                # their combination atom has the later eid by Corollary 1 (Zaki 2001)\n",
    "                if event_i.eid > event_j.eid:\n",
    "                    superseq = element_j.seq + tuple(element_i.seq[-1])\n",
    "                    superseq_event = Event(sid=sid,eid=event_i.eid)\n",
    "                    join_results[superseq] |= Element(superseq,superseq_event)\n",
    "\n",
    "                elif event_i.eid < event_j.eid:\n",
    "                    superseq = element_i.seq + tuple(element_j.seq[-1])\n",
    "                    superseq_event = Event(sid=sid,eid=event_j.eid)\n",
    "                    join_results[superseq] |= Element(superseq,superseq_event)\n",
    "\n",
    "                elif element_i.seq[-1] != element_j.seq[-1]:\n",
    "\n",
    "                    superseq_event = Event(sid=sid,eid=event_j.eid)\n",
    "\n",
    "                    # for coincident atoms, join the last element of one atom to the other\n",
    "                    # ensure that the itemset is sorted\n",
    "                    superseq_i = element_i.seq[:-1] + tuple([\n",
    "                        ''.join(sorted(set(element_i.seq[-1] + element_j.seq[-1])))\n",
    "                        ])\n",
    "                    join_results[superseq_i] |= Element(superseq_i,superseq_event)\n",
    "\n",
    "                    superseq_j = element_j.seq[:-1] + tuple([\n",
    "                        ''.join(sorted(set(element_i.seq[-1] + element_j.seq[-1])))\n",
    "                        ])\n",
    "\n",
    "                    # if both resulting atoms are identical, only add it once\n",
    "                    if superseq_j != superseq_i:\n",
    "                        join_results[superseq_j] |= Element(superseq_j,superseq_event)\n",
    "                \n",
    "    return join_results"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "#converting the list of tuples into a defaultdictionary\n",
    "\n",
    "elements = _KeyDefaultDict(Element) \n",
    "for sid,eid,itemset in sequences:\n",
    "    for item in itemset:\n",
    "        elements[tuple(item)] |= Element(tuple(item),Event(sid=sid,eid=eid))\n",
    "        "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "#returns all single element subsequences which meet the threshold\n",
    "#threshold is given in terms of number of occurances(eg: 494909 is 50% of 989818) so supp = 0.5\n",
    "elements = subset(elements,494909)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {},
   "outputs": [],
   "source": [
    "#returns all the two-element subsequences which meet the threshold \n",
    "\n",
    "freq_elements_len_eq_2 = frequent_two_seq(elements,494909)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{('1', '1')}"
      ]
     },
     "execution_count": 61,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "freq_elements_len_eq_2 "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "for two_seq in freq_elements_len_eq_2:\n",
    "    R = temporal_join(elements[tuple(two_seq[0])],elements[tuple(two_seq[1])])\n",
    "    for seq,element in R.items():\n",
    "        support = len(set([event.sid for event in element.events]))\n",
    "        if support >= support_threshold:\n",
    "            elements_len_eq_2[seq] |= element"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
